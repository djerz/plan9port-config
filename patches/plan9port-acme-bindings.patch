diff --git a/man/man1/acme.1 b/man/man1/acme.1
index 852a8f7f..cdc2c888 100644
--- a/man/man1/acme.1
+++ b/man/man1/acme.1
@@ -662,8 +662,8 @@ a chord, so that for example on Macs selecting text with the trackpad
 button and then typing Option without letting go of the button will
 cause a 1-2 chord, cutting the selection.
 On Mac systems, the usual keyboard shortcuts
-Command-C, -V, -X, and -Z invoke
-copy, paste, cut, and undo,
+Command-C, -S, -V, -X, and -Z invoke
+copy, save, paste, cut, and undo,
 and Command-Shift-Z invokes redo,
 as in other programs.
 Especially on Mac laptops, these keyboard shortcuts are
diff --git a/src/cmd/acme/text.c b/src/cmd/acme/text.c
index 09422dda..8f7b3ae5 100644
--- a/src/cmd/acme/text.c
+++ b/src/cmd/acme/text.c
@@ -563,6 +563,28 @@ textbswidth(Text *t, Rune c)
 	return t->q0-q;
 }
 
+/* erase to end of line version of textbswidth */
+int
+textfewidth(Text *t, Rune c)
+{
+	uint q, eq;
+	Rune r;
+	int skipping;
+
+	q = t->q0;
+	skipping = TRUE;
+	while(q < t->file->b.nc){
+		r = textreadc(t, q);
+		if(r == '\n'){          /* eat at most one more character */
+			if(q == t->q0)  /* eat the newline */
+				++q;
+			break;
+		}
+		++q;
+	}
+	return q-t->q0;
+}
+
 int
 textfilewidth(Text *t, uint q0, int oneelement)
 {
@@ -760,10 +782,48 @@ texttype(Text *t, Rune r)
 			q0++;
 		textshow(t, q0, q0, TRUE);
 		return;
+	case 0x0E:	/* ^N: move one line down */
+		typecommit(t);
+		q0 = t->q0;
+		nnb = 0;
+		if(q0>0 && textreadc(t, q0-1)!='\n')
+			nnb = textbswidth(t, 0x15);
+		while(q0<t->file->b.nc && textreadc(t, q0)!='\n')
+			q0++;
+		if (q0+1 <= t->file->b.nc)
+			q0++;
+		while(q0<t->file->b.nc && textreadc(t, q0)!='\n' && nnb--)
+			q0++;
+		textshow(t, q0, q0, TRUE);
+		return;
+	case 0x10:	/* ^P: move one line up */
+		typecommit(t);
+		q0 = t->q0;
+		nnb = 0;
+		n = 0;
+		if(q0>0 && textreadc(t, q0-1)!='\n')
+			nnb = textbswidth(t, 0x15);
+		q0 -= nnb;
+		if (q0>0)
+			q0--;
+		while (q0>0 && textreadc(t, q0-1)!='\n')
+			if (q0 == 0)
+				break;
+			else {
+				q0--;
+				n++;
+			}
+		q0 += (nnb > n) ? n : nnb;
+		textshow(t, q0, q0, TRUE);
+		return;
 	case Kcmd+'c':	/* %C: copy */
 		typecommit(t);
 		cut(t, t, nil, TRUE, FALSE, nil, 0);
 		return;
+	case Kcmd+'s':	/* %S: save */
+		typecommit(t);
+		put(&(t->w)->body, nil, nil, XXX, XXX, nil, 0);
+		return;
 	case Kcmd+'z':	/* %Z: undo */
 	 	typecommit(t);
 		undo(t, nil, nil, TRUE, 0, nil, 0);
@@ -847,11 +907,20 @@ texttype(Text *t, Rune r)
 	case 0x08:	/* ^H: erase character */
 	case 0x15:	/* ^U: erase line */
 	case 0x17:	/* ^W: erase word */
-		if(t->q0 == 0)	/* nothing to erase */
-			return;
-		nnb = textbswidth(t, r);
-		q1 = t->q0;
-		q0 = q1-nnb;
+	case 0x0B:      /* ^K: forward erase line */
+		if(r == 0x0B){
+			typecommit(t);
+			nnb = textfewidth(t, r);
+			q0 = t->q0;
+			q1 = q0+nnb;
+			textshow(t, q1, q1, TRUE);
+		}else{
+			if(t->q0 == 0)	/* nothing to erase */
+				return;
+			nnb = textbswidth(t, r);
+			q1 = t->q0;
+			q0 = q1-nnb;
+		}
 		/* if selection is at beginning of window, avoid deleting invisible text */
 		if(q0 < t->org){
 			q0 = t->org;
