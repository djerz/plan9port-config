#!/bin/sh

# Rename current Acme window file

set -e

if [ -z "$winid" ]; then
	echo "must be called from within acme" 1>&2
	exit 1
fi

if [ "$#" -eq 0 ]; then
	cat >&2 <<EOF
Rename the current Acme window's file

Usage: `basename $0` newfilename

newfilename is the new file name
EOF
	exit 1
fi

if [ "$#" -gt 1 ]; then
	echo "`basename $0` takes exactly one argument" 1>&2
	exit 1
fi

ISDIRECTORY_ISMODIFIED=`9p read acme/$winid/ctl | awk '{print $4$5}'`
if [ "$ISDIRECTORY_ISMODIFIED" != "00" ]; then
	echo "can only rename unmodified files" 1>&2
	exit 2
fi

TO=$1
FROM=`9p read acme/$winid/tag | awk -F' Del Snarf' '{print $1; exit}'`

# If target filepath is a relative one, construct path relative
# to current working directory
if ! echo $TO | grep -q '^/'; then
	TO="$PWD/$TO"
fi

# Canonicalize target filepath
itersed() {
	PREVSTR="$2"
	NEXTSTR="$2"
	while true; do
		NEXTSTR=$(printf "$NEXTSTR" | 9 sed -e "$1")
		[ "$PREVSTR" = "$NEXTSTR" ] && break
		PREVSTR="$NEXTSTR"
	done
	echo "$NEXTSTR"
}
TO=$(itersed 's;//;/;' "$TO")            # handle //
TO=$(itersed 's;/\.[/$];/;' "$TO")       # handle /.[/$]
TO=$(itersed 's;/\.$;;' "$TO")           # handle trailing /.
TO=$(itersed 's;([^/])/$;\1;' "$TO")     # remove trailing slashes
TO=$(itersed 's;/[^/]*[^\./][^/]*/\.\./;/;' "$TO")  # handle /somedir/../
TO=$(itersed 's;/[^/]*[^\./][^/]*/\.\.$;/;' "$TO")  # handle trailing /somedir/..

# Check target filepath does not traverse upward beyond root dir
if $(echo "$TO" | 9 grep -s '^/?\.\.(/|$)') 1>/dev/null 2>&1; then
	echo "Unable to resolve target path $1" >&2
	exit 1
fi

# Preserve current filename if target path is a directory
if [ -d "$TO" ]; then
	FILENAME=$(basename "$FROM")
	if $(echo "$TO" | 9 grep -v -s '/$'); then  # $TO does not end with /
		TO="$TO/$FILENAME"
	else                                        # $TO ends with /
		TO="$TO$FILENAME"
	fi
fi

# Check target filepath is different from initial filepath
if [ "$FROM" = "$TO" ]; then
	echo 'target filepath is the same as initial filepath' >&2
	exit 1
fi

# If the window file exists (not always the case), then move it
# to the new name only if does not clobber an existing file
if [ -f "$FROM" ]; then
	if [ -f "$TO" ]; then
		echo "$TO already exists, delete it first" 1>&2
		exit 2
	fi
	# Use `git mv` if file is under Git version control, else `mv`
	if git ls-files --error-unmatch "$FROM" 1>/dev/null 2>&1; then
		git mv "$FROM" "$TO"
	else
		mv "$FROM" "$TO"
	fi
fi

# Update Acme window
echo name "$TO" | 9p write acme/$winid/ctl
echo clean | 9p write acme/$winid/ctl
echo get | 9p write acme/$winid/ctl
