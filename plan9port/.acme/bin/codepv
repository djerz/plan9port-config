#!/bin/sh

# codepv (code preview)
# Preview current Acme window code file or a code file in a browser
# with syntax-highlighting and line numbers

set -e

while [ "$#" -gt 0 ]; do
	case $1 in
		-h)
			cat <<EOF
Preview current Acme window code file or a code file in a browser
with syntax highlighting and line numbers.

Usage: $(basename $0) [-h] [-n] [-b browsecmd] [-t tmpfile] [mdfile]

-h shows usage and exits
-n numbers the code lines (only works with pandoc)
-c convertcmd sets the conversion command to convertcmd
    (default: "pandoc --standalone" or "multimarkdown --full")
-b browsecmd sets the browser launch command to browsecmd
    (default: garcon-url-handler or xdg-open or open)
-t tmpfile sets the temporary HTML file generated to tmpfile
    (default: ~/Downloads/__tmp__.html for garcon-url-handler or /tmp/tmp.html otherwise)
mdfile is the path to a Markdown file
    (default: current window file if run from within Acme)

Note that the temporary HTML file is not automatically cleaned up by
this script.
EOF
			exit
			;;
		-n)
			NUMBERLINES=true
			shift
			;;
		-c)
			if [ -n "$2" ]; then
				CONVERT="$2"
				shift; shift
			else
				echo "-c requires a non-empty option argument that is a command (with args if needed)" >&2
				exit 1
			fi
			;;
		-b)
			if [ -n "$2" ]; then
				BROWSER="$2"
				shift; shift
			else
				echo "-b requires a non-empty option argument that is a command (with args if needed)" >&2
				exit 1
			fi
			;;
		-t)
			if [ -n "$2" ]; then
				TMPFILE="$2"
				shift; shift
			else
				echo "-t requires a non-empty option argument that is a file path" >&2
				exit 1
			fi
			;;
		*)
			MDFILE=$1
			shift
			break
	esac
done

# Check that there are no extra arguments
if [ "$#" -gt 1 ]; then
	echo 'must specify exactly zero or one file' >&2
	exit 1
fi

# Automatically set Markdown source file as needed (only when calling from Acme)
if [ -z "$MDFILE" ]; then
	if [ -z "$samfile" ]; then
		echo 'no file specified and not running in Acme'
		exit 1
	else
		MDFILE=$samfile
	fi
fi

# Automatically set browser command if not specified
if [ -z "$BROWSER" ]; then
	# Try Crostini (ChromeOS) > Linux > macOS URL handlers
	if command -v garcon-url-handler >/dev/null 2>&1; then
		BROWSER=garcon-url-handler
	elif command -v xdg-open >/dev/null 2>&1; then
		BROWSER=xdg-open
	elif command -v open >/dev/null 2>&1; then
		BROWSER=open
	else
		echo 'BROWSER variable not set and no auto-detected URL handler installed'
		exit 1
	fi
fi

# Automatically set conversion command if not specified
if [ -z "$CONVERT" ]; then
	if command -v pandoc >/dev/null 2>&1; then
		CONVERT="pandoc --standalone"
	elif command -v multimarkdown >/dev/null 2>&1; then
		CONVERT="multimarkdown --full"
	else
		echo 'convert command not set using -c option and no auto-detected Markdown converter installed'
		exit 1
	fi
fi

# Automatically set temporary HTML file path if not specified
if [ -z "$TMPFILE" ]; then
	# If using garcon-url-handler, the host browser cannot access files
	# outside the user directory tree, so work around by saving to the
	# user's Downloads directory
	if [ "$BROWSER" = "garcon-url-handler" ]; then
		TMPFILE="$HOME/Downloads/__tmp__.html"
	else
		TMPFILE=/tmp/tmp.html
	fi
fi

# Get code file suffix to infer programming language
FILESUFFIX=${MDFILE##*.}

# Wrap code file contents in Markdown code block and convert to HTML
# (note that assumes converter writes output to stdout)
cat "$MDFILE" | awk '
	BEGIN{
		print "---"
		print "title: Code previewer"
		print "---"
		print "<style> body { font-size: 16px; min-width: 80% !important; } </style>"
		print "## `'$MDFILE'`"
		print ""
		if ("'$NUMBERLINES'" == "true") {
			print "``` { .'$FILESUFFIX' .numberLines }"
		}
		else {
			print "```'$FILESUFFIX'"
		}
	}
	{
		print $0
	}
	END{
		print "```"
	}' | $CONVERT > "$TMPFILE"

# Open HTML file in browser
$BROWSER "$TMPFILE"
