# Tag
Edit Font :, :0 :$ :42,49 :/[Ff]oo/ :-/[Ff]oo/ :0+/foo/ :$-/foo/
Asave Blog Brecent EC F F- F+ d gl gb lw mdpv sp <cl-paste
|c- |c+ |ct |s- |s+ |s2t |t- |t+ |t2s |lower |upper |surround |uline
(Indent on) (Space on) (Tab 8) (rg+ '[Ff]oo') (rg- 'bar') (rg-- 'baz')
Slide Slide- Slide+ win

# Edit commands
=                   # file:linenumber
=#                  # file:charaddr
.,3                 # select from cursor to end of line 3
3,.                 # select from beginning of line 3 to cursor
.,.+#1d             # delete next char, like ^D in Emacs
,d                  # clear whole window, useful for +Error
,>wc                # line, word and char counts for whole buffer
s/[Ff]rom/to/g      # regexp replace across selected text
,s/[Ff]rom/to/g     # regexp replace across all text in current window
X                   # list all windows
X/^'/               # list all modified files
X/^'/ w             # write all modified files
,|dtw               # delete all trailing whitespace in window

# Characters
αβγδεζηθλμνξπρστφψωΓΔΘΛΞΠΣΦΨΩ   # Greek
–—‘’“”…«»•©®™†‡°·§¶№¡¿◊¢£€ÆŒæœ  # Typography
±×÷√∛∑∏∫≠≈≤≥∂∆∇∞∩¬              # Math
÷πℯ∈∉∋∌∘√∛∩∪≈≉≠≡≢≤≥⊆⊇⊈⊉⊊⊋⊻⊼⊽    # ...
←→↑↓¹²³ⁱⁿₖₘₙ                    # Other

# Other ~/.acme/bin commands
ci text             # gen case-insensitive regexp for non-regexp text

# Code search (https://github.com/google/codesearch)
cindex `{pwd}       # run just `cindex` to regenerate index
csearch -n -f '\.go$' '^func (\([^)]+\))? someFunctionName \('
find . -name '*.go' | xargs cgrep -i -n '^type someTypeName'

# Git
git grep -n 'some[Pp]attern'
git log --oneline -10
git status
git diff
git difftool --dir-diff
git add --all
git commit -a
git push -u origin
git fetch origin
git merge origin/main
git mergetool
git rebase -i HEAD~3     # NOTE: oldest commit must be set to "pick"
git push -u origin --force-with-lease  # NOTE: typically used after a rebase
git checkout BRANCH
git checkout -b BRANCH
git bisect <cmd>         # cmd: start > bad > good COMMIT > (bad|good)* > reset [COMMIT]

# Watch (requires 9fans.net/go/acme/Watch Go pkg)
Watch [-r] COMMAND [ARG1] ...

# acme-lsp (requires github.com/fhs/acme-lsp/cmd/{acme-lsp,L} Go pkgs)
win LSP
Lcomp Ldef Lfmt Lhov Limpls Lrefs [Lrn SYM] Lsig Lsyns Ltype Lws+ Lws-

# acre (https://github.com/mjibson/acre)
acre

# DevSkim (https://github.com/microsoft/DevSkim)
devskim analyze -f text -o '%F:%L:%C,%l:%c (%S) [%R] %N' $%

# ShellCheck (https://github.com/koalaman/shellcheck)
shellcheck -a -f gcc $%

# mdformat (https://github.com/executablebooks/mdformat)
Edit ,|mdformat --number --wrap 70 -

# Go tools gofmt and goimports
Edit ,|gofmt
Edit ,|goimports
Edit ,|goreturns

# Pandoc (https://pandoc.org/)
pandoc -o /tmp/tmp.html FILENAME.md && { xdg-open /tmp/tmp.html || open /tmp/tmp.html } &

# Python Black (https://github.com/psf/black)
Edit ,|black -q -

# Pylint (https://github.com/PyCQA/pylint)
condarun ENVNAME pylint -f parseable $%

# Plumber rules
cat $home/lib/plumbing | 9p write plumb/rules

# Advanced Edit commands
# 1. Find occurrences of 'User' or 'user' in window, with context
Edit , x g/[Uu]ser/ {
	=
	-1,+1p
}
# 2. Replace first occurrence of 'def' after each 'abc' to 'xyz' in all windows
Edit X/^[^\+]./ {
	,x /abc/ /def/ c/xyz/
}
# 3. Replace next occurrence of 'abc' to 'xyz' and jump to location in window
Edit /abc/ {
	c/xyz/
	.
}
