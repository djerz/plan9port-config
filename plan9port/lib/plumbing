# to update: cat $home/lib/plumbing | 9p write plumb/rules

editor = acme

# epub files
data matches '([a-zA-Z¡-￿0-9_\-./\(\)&][ a-zA-Z¡-￿0-9_\-./\(\)&]*)\.[Ee][Pp][Uu][Bb]'
arg isfile $0
plumb to epub
plumb start rc -c 'xdg-open '''$file''' || open '''$file''''

# ms office files (docx?, xlsx?, pptx?)
data matches '([a-zA-Z¡-￿0-9_\-./\(\)&][ a-zA-Z¡-￿0-9_\-./\(\)&]*)\.([Dd][Oo][Cc][Xx]?|[Xx][Ll][Ss][Xx]?|[Pp][Pp][Tt][Xx]?)'
arg isfile $0
plumb to office
plumb start rc -c 'xdg-open '''$file''' || open '''$file''''

# pdf files
data matches '([a-zA-Z¡-￿0-9_\-./\(\)&][ a-zA-Z¡-￿0-9_\-./\(\)&]*)\.[Pp][Dd][Ff]'
arg isfile $0
plumb to pdf
plumb start rc -c 'xdg-open '''$file''' || open '''$file''''

# image files
type is text
data matches '[a-zA-Z¡-￿0-9_\-./@]+'
data matches '([a-zA-Z¡-￿0-9_\-./@]+)\.(jpe?g|JPE?G|gif|GIF|tiff?|TIFF?|ppm|bit|png|PNG)'
arg isfile $0
plumb to image
plumb start rc -c 'xdg-open '''$file''' || open '''$file''' || 9 page '''$file''''

# ocaml errors
# example: in file "foo/bar.ml", line 155, characters 30-62
# from: https://discuss.ocaml.org/t/acme-plumbing-rules-for-ocaml/10467
type is text
data matches '.*[Ff]ile "([^"]+)", line ([0-9]+), characters ([0-9]+)-([0-9]+).*'
arg isfile $1
data set $file
attr add addr=$2-#0+#$3,$2-#0+#$4
plumb to edit
plumb client $editor

# ocaml errors
# example: File "tests/dune", line 2, characters 7-22:
# from: https://discuss.ocaml.org/t/acme-plumbing-rules-for-ocaml/10467
type is text
data matches '.*[Ff]ile "([^"]+)", lines ([0-9]+)-([0-9]+).*'
arg isfile $1
data set $file
attr add addr=$2,$3
plumb to edit
plumb client $editor

# python errors
type is text
data matches ' *File "([a-zA-Z¡-￿0-9_\-./]+)", line ([0-9]+).*'
arg isfile $1
data set $file
attr add addr=$2
plumb to edit
plumb client $editor

# python enhancement proposal (PEP)
type is text
data matches 'PEP-?([0-9]+)'
plumb start rc -c 'printf ''https://www.python.org/dev/peps/pep-%04d/'' '$1'/ | plumb -i'

# request for comments (RFC)
type is text
data matches 'RFC[\-:]?([0-9]+)'
plumb to web
plumb start web https://www.rfc-editor.org/info/rfc$1

# digital object identifer (DOI)
type is text
data matches '10.[0-9][0-9][0-9][0-9][0-9]?[0-9]?[0-9]?[0-9]?[0-9]?/[\-\._;\(\)/:a-zA-Z0-9]+'
data set https://doi.org/$0
plumb to web
plumb start web $data

# git commits, sourced from https://alexkarle.com/blog/plan9-acme-git-gui.html
type is text
data matches '[a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9]+'
plumb start rc -c 'git -C '$wdir' show '$0' >[2=1] | plumb -i -d edit -a ''action=showdata filename=/'$wdir'/'$0''''

# financial instrument global identifier (OpenFIGI)
type is text
data matches 'BBG[0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9]'
data set https://www.openfigi.com/id/$0
plumb to web
plumb start web $data

# stock ticker
type is text
data matches 'ticker://([0-9A-Z.]+)'
data set https://finance.yahoo.com/quote/$1/
plumb to web
plumb start web $data

# morningstar.com search
type is text
data matches 'morningstar://([0-9A-Za-z\-.]+)'
data set https://www.morningstar.com/search?query=$1
plumb to web
plumb start web $data

# sec.gov/edgar entity search
type is text
data matches 'edgar://([0-9A-Za-z \-.]+)'
data set https://www.sec.gov/edgar/search/#/entityName=$1
plumb to web
plumb start web $data

# day YYYY-MM-DD or YYYYMMDD in Google Calendar
type is text
data matches '(20[0-9][0-9])[\-/]?(0[1-9]|1[0-2])[\-/]?(0[1-9]|[1-2][0-9]|3[01])'
data set https://calendar.google.com/calendar/u/0/r/day/$1/$2/$3
plumb to web
plumb start web $data

# month YYYY-MM or YYYYMM in Google Calendar
type is text
data matches '(20[0-9][0-9])[\-/]?(0[1-9]|1[0-2])'
data set https://calendar.google.com/calendar/u/0/r/month/$1/$2/01
plumb to web
plumb start web $data

# gemini using [gcat](https://github.com/aaronjanse/gcat)
# first sed expression is to handle same host relative links ('=> foo/')
# second sed expression is to handle same host absolute links ('=> //bar')
# third sed expression is to handle same host parent links ('=> ../')
# fourth sed expression is to clean up messy relative links ('=> ./baz')
# right-click :-/text\/gemini/ in Acme to search to start of plumbed page
type is text
data matches '(gemini://[^ |{};]*[^/])/?'
plumb to gemini
plumb start rc -c 'gcat '$1' | 9 sed -e ''s;^=> ([^: 	]+[ 	]);=> '$1'/\1;g'' -e ''s;^(=> gemini://[^/]+)([^ 	]*/)(/[^ 	]*);\1\3;g'' -e ''s;(^=> [^ 	]*)/[^/]+/../([^ 	]*);\1/\2;g'' -e ''s;(^=> [^ 	]*)/./([^ 	]*);\1/\2;g'' | 9p write acme/cons'

# open HN item using hn script
type is text
data matches 'https?://news.ycombinator.com/item\?id=([0-9]*)'
plumb to hn
plumb start rc -c 'hn item '$1' | 9p write acme/cons'

# open HN user page using hn script
type is text
data matches 'https?://news.ycombinator.com/user\?id=([\-_0-9A-Za-z]*)'
plumb to hn
plumb start rc -c 'hn user '$1' | 9p write acme/cons'

# open HN top stories, Ask HN, Show HN, or HN YC startup jobs using hn script
type is text
data matches 'https?://news.ycombinator.com/(news|ask|show|jobs)'
plumb to hn
plumb start rc -c 'hn '$1' | 9p write acme/cons'

# open HN top stories using hn script
type is text
data matches 'https?://news.ycombinator.com/?'
plumb to hn
plumb start rc -c 'hn news | 9p write acme/cons'

# view twitter through [nitter](https://github.com/zedeus/nitter)
type is text
data matches 'https?://twitter.com/(.*)'
data set https://nitter.net/$1
plumb to web
plumb start web $data

# include basic plumbing rules
include basic
